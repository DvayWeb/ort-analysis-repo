name: ORT License Compliance Scan
on:  
  workflow_dispatch:

jobs:
  ort-scan:
    runs-on: ubuntu-latest
    name: ORT License Compliance Check
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
  
    - name: Setup ORT configuration files
      run: |
        # Create ORT config directory
        mkdir -p .ort/config

        # Copy evaluator rules to ORT config directory
        cp evaluator.rules.kts .ort/config/
        cp license-classifications.yml .ort/config/

        echo "ORT configuration files setup complete"

    - name: Run ORT analysis
      uses: oss-review-toolkit/ort-ci-github-action@v1
      with:
        ort-version: 'latest'
        mode: 'analyze'
        args: |
          -P ort.scanner.skipExcluded=true
          -P ort.evaluator.rulesFile=./.ort/config/evaluator.rules.kts
          -P ort.resolver.yarn.workspaces=true
          -P ort.scanner.curators.enabled=true
          -P ort.scanner.archive.enabled=true
          -P ort.analyzer.allowDynamicVersions=true
          --stacktrace
      env:
        ORT_CONFIG_DIR: ${{ github.workspace }}/.ort/config

    - name: Upload ORT results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ort-results-${{ github.run_number }}
        path: |
          ort-result.yml
          ort-result.json
          ort-report.html
          ort-report.md
        retention-days: 30

    - name: Check for violations
      run: |
        if [ -f "ort-result.json" ]; then
          echo "Checking for license violations..."

          # Count violations
          rejected=$(grep -c "REJECTED" ort-result.json || echo "0")
          needs_review=$(grep -c "NEEDS_REVIEW" ort-result.json || echo "0")

          echo "::notice::License compliance check completed"
          echo "::notice::Rejected licenses: $rejected"
          echo "::notice::Licenses needing review: $needs_review"

          if [ "$rejected" -gt 0 ]; then
            echo "::error::$rejected package(s) with rejected licenses found"
            exit 1
          fi

          if [ "$needs_review" -gt 0 ]; then
            echo "::warning::$needs_review package(s) need license review"
          fi
        fi
      if: always()
